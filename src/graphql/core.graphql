query Stats {
  userGeneSets {
    totalCount
  }
  geneSets {
    totalCount
  }
  pmcs {
    totalCount
  }
  pmcStats {
    nPublicationsProcessed
  }
    
  gseStats {
    totalCount
    nodes {
      nOccurrencesProcessed
      species
    }
  }

   pmcTermStats {
    nodes {
      uniqueTermPartsCount
    }
  }

  uniqueTermCounts {
    nodes{
      uniqueTermCount
    }
  }
    counterTable(id: 1){
    count
  }



}


query FetchUserGeneSet($id: UUID!) {
  userGeneSet(id: $id) {
    genes
    description
  }
}

# Perform enrichment analysis against a specific library
query EnrichmentQuery($genes: [String]!, $filterTerm: String = "", $offset: Int = 0, $first: Int = 10) {
  currentBackground {
    enrich(genes: $genes, filterTerm: $filterTerm, offset: $offset, first: $first) {
      nodes {
        geneSetHash
        pvalue
        adjPvalue
        oddsRatio
        nOverlap
        geneSets {
          nodes {
            id
            term
            description
            nGeneIds
            gseInfosByGse(first:1) {
              nodes {
              gse
              id
              platform
              publishedDate
              sampleGroups
              title
              summary
              }

            }
            pmcInfoByPmc{
              abstract
              doi
              id
              pmc
              title
              yr
            }
            species
            
          }
          totalCount
        }
      }
      totalCount
    }
  }
}

# Gene search: find all genesets containing certain gene(s)
query GeneSearch($genes: [String]!, $offset: Int = 0, $first: Int = 10) {
  geneSetGeneSearch(genes: $genes, offset: $offset, first: $first) {
    nodes {
      term
    }
    totalCount
  }
}

# Term search: find all genesets containing certain term(s)
query TermSearch($terms: [String]!, $offset: Int = 0, $first: Int = 10) {
  geneSetTermSearch(terms: $terms, offset: $offset, first: $first) {
    nodes {
      id
      term
      nGeneIds
    }
    totalCount
  }
}



query TermSearch2($terms: [String]! = ["neuron"], $offset: Int = 0, $first: Int = 10) {
  geneSetTermSearch2(terms: $terms, offset: $offset, first: $first) {
    nodes {
    gse
    gseId
    gseInfoByGse {
        species
        gse
        platform
        pmid
        publishedDate
        sampleGroups
        title
        geneSetByGse{
          term
          id
        }
      }
    }
    totalCount
  }
}

mutation AddUserGeneSet($genes: [String], $description: String = "") {
  addUserGeneSet(input: {genes: $genes, description: $description}) {
    userGeneSet {
      id
    }
  }
}

mutation UpdateHypothesis($id: UUID!, $hypothesis: String!) {
  updateHypothesis(input: {pId: $id, pHypothesis: $hypothesis}) {
    geneSet {
      id 
      hypothesis
    }
  }
}

mutation UpdateRatings($id: UUID!, $rating: Float!) {
  updateRatings(input: {pId: $id, pRating : $rating}) {
    geneSet {
      id 
      hypothesis
      hypothesisRating
    }
  }
}


mutation IncrementCounter{
  incrementCounter(input: {}) {
    integer
  }
}




query ViewGeneSet($id: UUID!) {
  geneSet(id: $id) {
    genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
    hypothesis
    hypothesisTitle
    enrichLinks
    hypothesisRating
    nGeneIds
    rummageneSize
    rummageoSize
    pvalue
    ratingCounts
  }
}


query ViewGeneSet2($id: UUID!) {
  geneSet(id: $id) {
    term
    description
    species

    genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query ViewGeneSet3($term: String!) {
  geneSetByTerm(term: $term) {
    term
    description
    genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}


query TermsPmcs($pmcids: [String]!) {
  termsPmcsCount(pmcids: $pmcids) {
    nodes {
      pmc
      id
      term
      count
    }
  }
}



query TermsPmcs4($term: String!) {
  termsPmcsArray(term: $term) 
}




query TermsGses($gseids: [String]!) {
  termsGsesCount(gseids: $gseids) {
   nodes {
      count
      gse
      id
      term
    }
  }
}

query TermsGses4($term: String!) {
  termsGsesArray(term: $term) 
}



query FetchGeneInfo($genes: [String]!) {
  geneMap2(genes: $genes) {
    nodes {
      gene
      geneInfo {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query LatestRelease {
  releases(orderBy: CREATED_DESC, first: 1) {
    nodes {
      created
    }
  }
}

# get top 200 genesets
query ViewGeneSets($number: Int!) {
  geneSets(first: $number){
    nodes{
      id
      nGeneIds
      term
      species
      description
      genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
      gseInfosByGse(first:1) {
              nodes {
              gse
              id
              title
              summary
              sampleGroups
              }
      }
      pmcInfoByPmc{
              abstract
              id
              title
              pmc
            }
      rummageneSize
      rummageoSize
      odds 
      pvalue
      hypothesis
    }
    totalCount
  }
}

query QueryGsmMeta($gsms: [String]! = ["GSM4648170", "GSM4648184", "GSM4648189"]) {
  getGsmMeta(gsms: $gsms){
    nodes {
      gse
      gsm
      title
      characteristicsCh1
      sourceNameCh1
    }
  }
}

query QueryGseSummary($id: UUID!) {
  gseInfo(id: $id) {
    title
    summary
    sampleGroups
    }
}

query OverlapQuery($id: UUID!, $genes: [String]!) {
  geneSet(id: $id) {
    overlap(genes: $genes) {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query ViewRankedSets($range: Int!, $start: Int!, $filterTerm: String, $case: Boolean, $species: String){
  getPaginatedRankedGeneSets(pLimit: $range, pOffset: $start, pTerm: $filterTerm, pCaseSensitive: $case, pSpecies: $species){
    rankedSets{
      id
      rank
      geneSetById {
      term
      description
      nGeneIds
      
        genes {
          nodes {
            symbol
            ncbiGeneId
            description
            summary
          }
        }

        gseInfosByGse(first: 1) {
          nodes {
            gse
            id
            title
            summary
            sampleGroups
          }
        }
        pmcInfoByPmc {
          abstract
          id
          title
          pmc
        }
        rummageneSize
        rummageoSize
        odds
        pvalue
        hypothesis
        hypothesisTitle
      }
    }
    totalCount
  }

}
query QueryGseSummary($id: UUID!) {
  gseInfo(id: $id) {
    title
    summary
    sampleGroups
    }
}

query OverlapQuery($id: UUID!, $genes: [String]!) {
  geneSet(id: $id) {
    overlap(genes: $genes) {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}







query QueryPmCSummary($id: UUID!) {
  pmcInfo(id: $id) {
    title
    abstract
    pmc
    }
}


query GetPmcInfoByIds($pmcids: [String]!){
  getPmcInfoByIds(pmcids: $pmcids) {
    nodes {
      pmc
      title
      yr
      doi
    }
  }
}


query GetGseInfoByIds($gseids: [String]!){
  getGseInfoByIds(gseids: $gseids) {
      nodes {
      gse
      id
      platform
      pmid
      publishedDate
      sampleGroups
      silhouetteScore
      species
      summary
      title
    }
  }
}

query numEnquiries($num: Int!){
  counterTable(id: $num){
    count
  }
}